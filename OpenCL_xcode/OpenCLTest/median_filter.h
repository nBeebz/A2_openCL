#ifndef __MEDIAN_FILTER_H_
#define __MEDIAN_FILTER_H_

/**
 * File generated by OpenCL CodeBench on Thu May 30 20:00:24 2013
 *
 * THIS CODE IS MADE AVAILABLE “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, 
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY 
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE 
 * AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, 
 * OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <OpenCL/opencl.h>

// Fraction used for work load balancing
#define F (8)
#define MAX_NUM_DEV (16)

typedef struct median_filter median_filter;
struct median_filter {
  cl_program program;
  cl_kernel kernel;
  cl_context context;
  cl_command_queue queue[MAX_NUM_DEV];
  cl_device_id device[MAX_NUM_DEV];
  int load[MAX_NUM_DEV];
  cl_uint noOfDevices;
  cl_mem buffer_x;
  cl_mem buffer_y;
};

/**
 * Main function to run the accelerator on given inputs.
 * This function will spawn the kernel as many times as needed to
 * finish all the work items in OpenCL terminology.
 */
void median_filter_run(cl_uint *x, cl_uint *y, cl_int width, cl_int heigth);

/**
 * Set the load factors for the different devices. Each
 * factor needs to be 0<=factor<=F and the sum of all
 * factors needs to be F.
 *
 * @param factors Load factors for the devices.
 */
void median_filter_setLoadFactors(int *factors);

/**
 * Retrieve the number of effectively found devices
 */
int median_filter_getNoOfDevices();

/**
 * Cleanup all the allocated resources for this accelerator interface.
 */
void median_filter_tearDown();

#endif
